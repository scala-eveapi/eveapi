// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package eveapi.xml.account.char.KillMails

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[eveapi.xml.account.char.KillMails.Foo](node)
val document = scalaxb.toXML[eveapi.xml.account.char.KillMails.Foo](obj, "foo", eveapi.xml.account.char.KillMails.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val KillMailsEveapiFormat: scalaxb.XMLFormat[eveapi.xml.account.char.KillMails.Eveapi] = new DefaultKillMailsEveapiFormat {}
  implicit lazy val KillMailsResultFormat: scalaxb.XMLFormat[eveapi.xml.account.char.KillMails.Result] = new DefaultKillMailsResultFormat {}
  implicit lazy val KillMailsRowsetFormat: scalaxb.XMLFormat[eveapi.xml.account.char.KillMails.Rowset] = new DefaultKillMailsRowsetFormat {}
  implicit lazy val KillMailsRowFormat: scalaxb.XMLFormat[eveapi.xml.account.char.KillMails.Row] = new DefaultKillMailsRowFormat {}
  implicit lazy val KillMailsVictimFormat: scalaxb.XMLFormat[eveapi.xml.account.char.KillMails.Victim] = new DefaultKillMailsVictimFormat {}

  trait DefaultKillMailsEveapiFormat extends scalaxb.ElemNameParser[eveapi.xml.account.char.KillMails.Eveapi] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.account.char.KillMails.Eveapi] =
      phrase((scalaxb.ElemName(None, "currentTime")) ~ 
      (scalaxb.ElemName(None, "result")) ~ 
      (scalaxb.ElemName(None, "cachedUntil")) ^^
      { case p1 ~ p2 ~ p3 =>
      eveapi.xml.account.char.KillMails.Eveapi(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[eveapi.xml.account.char.KillMails.Result](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.account.char.KillMails.Eveapi, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.account.char.KillMails.Eveapi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.currentTime, None, Some("currentTime"), __scope, false),
        scalaxb.toXML[eveapi.xml.account.char.KillMails.Result](__obj.result, None, Some("result"), __scope, false),
        scalaxb.toXML[String](__obj.cachedUntil, None, Some("cachedUntil"), __scope, false))

  }

  trait DefaultKillMailsResultFormat extends scalaxb.ElemNameParser[eveapi.xml.account.char.KillMails.Result] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.account.char.KillMails.Result] =
      phrase((scalaxb.ElemName(None, "rowset")) ^^
      { case p1 =>
      eveapi.xml.account.char.KillMails.Result(scalaxb.fromXML[eveapi.xml.account.char.KillMails.Rowset](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: eveapi.xml.account.char.KillMails.Result, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[eveapi.xml.account.char.KillMails.Rowset](__obj.rowset, None, Some("rowset"), __scope, false))

  }

  trait DefaultKillMailsRowsetFormat extends scalaxb.ElemNameParser[eveapi.xml.account.char.KillMails.Rowset] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.account.char.KillMails.Rowset] =
      phrase(safeRep(scalaxb.ElemName(None, "row")) ^^
      { case p1 =>
      eveapi.xml.account.char.KillMails.Rowset(p1.toSeq map { scalaxb.fromXML[eveapi.xml.account.char.KillMails.Row](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@columns").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@columns" -> _ },
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.account.char.KillMails.Rowset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@columns", _) => attr = scala.xml.Attribute(null, "columns", __obj.columns.toString, attr)
        case ("@key", _) => __obj.key foreach { x => attr = scala.xml.Attribute(null, "key", x.toString, attr) }
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.account.char.KillMails.Rowset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.row flatMap { scalaxb.toXML[eveapi.xml.account.char.KillMails.Row](_, None, Some("row"), __scope, false) })

  }

  trait DefaultKillMailsRowFormat extends scalaxb.ElemNameParser[eveapi.xml.account.char.KillMails.Row] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.account.char.KillMails.Row] =
      phrase(opt(scalaxb.ElemName(None, "victim")) ~ 
      opt(scalaxb.ElemName(None, "rowset")) ^^
      { case p1 ~ p2 =>
      eveapi.xml.account.char.KillMails.Row(p1.headOption map { scalaxb.fromXML[eveapi.xml.account.char.KillMails.Victim](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[eveapi.xml.account.char.KillMails.Rowset](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@allianceID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@allianceID" -> _ },
        (node \ "@allianceName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@allianceName" -> _ },
        (node \ "@characterID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@characterID" -> _ },
        (node \ "@characterName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@characterName" -> _ },
        (node \ "@corporationID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@corporationID" -> _ },
        (node \ "@corporationName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@corporationName" -> _ },
        (node \ "@damageDone").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@damageDone" -> _ },
        (node \ "@factionID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@factionID" -> _ },
        (node \ "@factionName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@factionName" -> _ },
        (node \ "@finalBlow").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@finalBlow" -> _ },
        (node \ "@flag").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@flag" -> _ },
        (node \ "@killID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@killID" -> _ },
        (node \ "@killTime").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@killTime" -> _ },
        (node \ "@moonID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@moonID" -> _ },
        (node \ "@qtyDestroyed").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@qtyDestroyed" -> _ },
        (node \ "@qtyDropped").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@qtyDropped" -> _ },
        (node \ "@securityStatus").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@securityStatus" -> _ },
        (node \ "@shipTypeID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@shipTypeID" -> _ },
        (node \ "@singleton").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@singleton" -> _ },
        (node \ "@solarSystemID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@solarSystemID" -> _ },
        (node \ "@typeID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@typeID" -> _ },
        (node \ "@weaponTypeID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@weaponTypeID" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.account.char.KillMails.Row, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@allianceID", _) => __obj.allianceID foreach { x => attr = scala.xml.Attribute(null, "allianceID", x.toString, attr) }
        case ("@allianceName", _) => __obj.allianceName foreach { x => attr = scala.xml.Attribute(null, "allianceName", x.toString, attr) }
        case ("@characterID", _) => __obj.characterID foreach { x => attr = scala.xml.Attribute(null, "characterID", x.toString, attr) }
        case ("@characterName", _) => __obj.characterName foreach { x => attr = scala.xml.Attribute(null, "characterName", x.toString, attr) }
        case ("@corporationID", _) => __obj.corporationID foreach { x => attr = scala.xml.Attribute(null, "corporationID", x.toString, attr) }
        case ("@corporationName", _) => __obj.corporationName foreach { x => attr = scala.xml.Attribute(null, "corporationName", x.toString, attr) }
        case ("@damageDone", _) => __obj.damageDone foreach { x => attr = scala.xml.Attribute(null, "damageDone", x.toString, attr) }
        case ("@factionID", _) => __obj.factionID foreach { x => attr = scala.xml.Attribute(null, "factionID", x.toString, attr) }
        case ("@factionName", _) => __obj.factionName foreach { x => attr = scala.xml.Attribute(null, "factionName", x.toString, attr) }
        case ("@finalBlow", _) => __obj.finalBlow foreach { x => attr = scala.xml.Attribute(null, "finalBlow", x.toString, attr) }
        case ("@flag", _) => __obj.flag foreach { x => attr = scala.xml.Attribute(null, "flag", x.toString, attr) }
        case ("@killID", _) => __obj.killID foreach { x => attr = scala.xml.Attribute(null, "killID", x.toString, attr) }
        case ("@killTime", _) => __obj.killTime foreach { x => attr = scala.xml.Attribute(null, "killTime", x.toString, attr) }
        case ("@moonID", _) => __obj.moonID foreach { x => attr = scala.xml.Attribute(null, "moonID", x.toString, attr) }
        case ("@qtyDestroyed", _) => __obj.qtyDestroyed foreach { x => attr = scala.xml.Attribute(null, "qtyDestroyed", x.toString, attr) }
        case ("@qtyDropped", _) => __obj.qtyDropped foreach { x => attr = scala.xml.Attribute(null, "qtyDropped", x.toString, attr) }
        case ("@securityStatus", _) => __obj.securityStatus foreach { x => attr = scala.xml.Attribute(null, "securityStatus", x.toString, attr) }
        case ("@shipTypeID", _) => __obj.shipTypeID foreach { x => attr = scala.xml.Attribute(null, "shipTypeID", x.toString, attr) }
        case ("@singleton", _) => __obj.singleton foreach { x => attr = scala.xml.Attribute(null, "singleton", x.toString, attr) }
        case ("@solarSystemID", _) => __obj.solarSystemID foreach { x => attr = scala.xml.Attribute(null, "solarSystemID", x.toString, attr) }
        case ("@typeID", _) => __obj.typeID foreach { x => attr = scala.xml.Attribute(null, "typeID", x.toString, attr) }
        case ("@weaponTypeID", _) => __obj.weaponTypeID foreach { x => attr = scala.xml.Attribute(null, "weaponTypeID", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.account.char.KillMails.Row, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.victim map { scalaxb.toXML[eveapi.xml.account.char.KillMails.Victim](_, None, Some("victim"), __scope, false) } getOrElse {Nil},
        __obj.rowset map { scalaxb.toXML[eveapi.xml.account.char.KillMails.Rowset](_, None, Some("rowset"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultKillMailsVictimFormat extends scalaxb.XMLFormat[eveapi.xml.account.char.KillMails.Victim] with scalaxb.CanWriteChildNodes[eveapi.xml.account.char.KillMails.Victim] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, eveapi.xml.account.char.KillMails.Victim] = seq match {
      case node: scala.xml.Node => Right(eveapi.xml.account.char.KillMails.Victim(scala.collection.immutable.ListMap(List(
        (node \ "@allianceID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@allianceID" -> _ },
        (node \ "@allianceName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@allianceName" -> _ },
        (node \ "@characterID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@characterID" -> _ },
        (node \ "@characterName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@characterName" -> _ },
        (node \ "@corporationID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@corporationID" -> _ },
        (node \ "@corporationName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@corporationName" -> _ },
        (node \ "@damageTaken").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@damageTaken" -> _ },
        (node \ "@factionID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@factionID" -> _ },
        (node \ "@factionName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@factionName" -> _ },
        (node \ "@shipTypeID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@shipTypeID" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: eveapi.xml.account.char.KillMails.Victim, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@allianceID", _) => attr = scala.xml.Attribute(null, "allianceID", __obj.allianceID.toString, attr)
        case ("@allianceName", _) => attr = scala.xml.Attribute(null, "allianceName", __obj.allianceName.toString, attr)
        case ("@characterID", _) => attr = scala.xml.Attribute(null, "characterID", __obj.characterID.toString, attr)
        case ("@characterName", _) => attr = scala.xml.Attribute(null, "characterName", __obj.characterName.toString, attr)
        case ("@corporationID", _) => attr = scala.xml.Attribute(null, "corporationID", __obj.corporationID.toString, attr)
        case ("@corporationName", _) => attr = scala.xml.Attribute(null, "corporationName", __obj.corporationName.toString, attr)
        case ("@damageTaken", _) => attr = scala.xml.Attribute(null, "damageTaken", __obj.damageTaken.toString, attr)
        case ("@factionID", _) => attr = scala.xml.Attribute(null, "factionID", __obj.factionID.toString, attr)
        case ("@factionName", _) => attr = scala.xml.Attribute(null, "factionName", __obj.factionName.toString, attr)
        case ("@shipTypeID", _) => attr = scala.xml.Attribute(null, "shipTypeID", __obj.shipTypeID.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.account.char.KillMails.Victim, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

