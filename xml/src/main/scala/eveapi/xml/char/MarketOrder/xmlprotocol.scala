// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package eveapi.xml.char.MarketOrder

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[eveapi.xml.char.MarketOrder.Foo](node)
val document = scalaxb.toXML[eveapi.xml.char.MarketOrder.Foo](obj, "foo", eveapi.xml.char.MarketOrder.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val MarketOrderEveapiFormat: scalaxb.XMLFormat[eveapi.xml.char.MarketOrder.Eveapi] = new DefaultMarketOrderEveapiFormat {}
  implicit lazy val MarketOrderResultFormat: scalaxb.XMLFormat[eveapi.xml.char.MarketOrder.Result] = new DefaultMarketOrderResultFormat {}
  implicit lazy val MarketOrderRowsetFormat: scalaxb.XMLFormat[eveapi.xml.char.MarketOrder.Rowset] = new DefaultMarketOrderRowsetFormat {}
  implicit lazy val MarketOrderRowFormat: scalaxb.XMLFormat[eveapi.xml.char.MarketOrder.Row] = new DefaultMarketOrderRowFormat {}

  trait DefaultMarketOrderEveapiFormat extends scalaxb.ElemNameParser[eveapi.xml.char.MarketOrder.Eveapi] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.char.MarketOrder.Eveapi] =
      phrase((scalaxb.ElemName(None, "currentTime")) ~ 
      (scalaxb.ElemName(None, "result")) ~ 
      (scalaxb.ElemName(None, "cachedUntil")) ^^
      { case p1 ~ p2 ~ p3 =>
      eveapi.xml.char.MarketOrder.Eveapi(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[eveapi.xml.char.MarketOrder.Result](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.char.MarketOrder.Eveapi, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.char.MarketOrder.Eveapi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.currentTime, None, Some("currentTime"), __scope, false),
        scalaxb.toXML[eveapi.xml.char.MarketOrder.Result](__obj.result, None, Some("result"), __scope, false),
        scalaxb.toXML[String](__obj.cachedUntil, None, Some("cachedUntil"), __scope, false))

  }

  trait DefaultMarketOrderResultFormat extends scalaxb.ElemNameParser[eveapi.xml.char.MarketOrder.Result] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.char.MarketOrder.Result] =
      phrase((scalaxb.ElemName(None, "rowset")) ^^
      { case p1 =>
      eveapi.xml.char.MarketOrder.Result(scalaxb.fromXML[eveapi.xml.char.MarketOrder.Rowset](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: eveapi.xml.char.MarketOrder.Result, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[eveapi.xml.char.MarketOrder.Rowset](__obj.rowset, None, Some("rowset"), __scope, false))

  }

  trait DefaultMarketOrderRowsetFormat extends scalaxb.ElemNameParser[eveapi.xml.char.MarketOrder.Rowset] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.char.MarketOrder.Rowset] =
      phrase(safeRep(scalaxb.ElemName(None, "row")) ^^
      { case p1 =>
      eveapi.xml.char.MarketOrder.Rowset(p1.toSeq map { scalaxb.fromXML[eveapi.xml.char.MarketOrder.Row](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@columns").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@columns" -> _ },
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.char.MarketOrder.Rowset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@columns", _) => attr = scala.xml.Attribute(null, "columns", __obj.columns.toString, attr)
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.key.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.char.MarketOrder.Rowset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.row flatMap { scalaxb.toXML[eveapi.xml.char.MarketOrder.Row](_, None, Some("row"), __scope, false) })

  }

  trait DefaultMarketOrderRowFormat extends scalaxb.XMLFormat[eveapi.xml.char.MarketOrder.Row] with scalaxb.CanWriteChildNodes[eveapi.xml.char.MarketOrder.Row] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, eveapi.xml.char.MarketOrder.Row] = seq match {
      case node: scala.xml.Node => Right(eveapi.xml.char.MarketOrder.Row(scala.collection.immutable.ListMap(List(
        (node \ "@accountKey").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@accountKey" -> _ },
        (node \ "@bid").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@bid" -> _ },
        (node \ "@charID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@charID" -> _ },
        (node \ "@duration").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@duration" -> _ },
        (node \ "@escrow").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@escrow" -> _ },
        (node \ "@issued").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@issued" -> _ },
        (node \ "@minVolume").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@minVolume" -> _ },
        (node \ "@orderID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@orderID" -> _ },
        (node \ "@orderState").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@orderState" -> _ },
        (node \ "@price").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@price" -> _ },
        (node \ "@range").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@range" -> _ },
        (node \ "@stationID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@stationID" -> _ },
        (node \ "@typeID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@typeID" -> _ },
        (node \ "@volEntered").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@volEntered" -> _ },
        (node \ "@volRemaining").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@volRemaining" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: eveapi.xml.char.MarketOrder.Row, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@accountKey", _) => attr = scala.xml.Attribute(null, "accountKey", __obj.accountKey.toString, attr)
        case ("@bid", _) => attr = scala.xml.Attribute(null, "bid", __obj.bid.toString, attr)
        case ("@charID", _) => attr = scala.xml.Attribute(null, "charID", __obj.charID.toString, attr)
        case ("@duration", _) => attr = scala.xml.Attribute(null, "duration", __obj.duration.toString, attr)
        case ("@escrow", _) => attr = scala.xml.Attribute(null, "escrow", __obj.escrow.toString, attr)
        case ("@issued", _) => attr = scala.xml.Attribute(null, "issued", __obj.issued.toString, attr)
        case ("@minVolume", _) => attr = scala.xml.Attribute(null, "minVolume", __obj.minVolume.toString, attr)
        case ("@orderID", _) => attr = scala.xml.Attribute(null, "orderID", __obj.orderID.toString, attr)
        case ("@orderState", _) => attr = scala.xml.Attribute(null, "orderState", __obj.orderState.toString, attr)
        case ("@price", _) => attr = scala.xml.Attribute(null, "price", __obj.price.toString, attr)
        case ("@range", _) => attr = scala.xml.Attribute(null, "range", __obj.range.toString, attr)
        case ("@stationID", _) => attr = scala.xml.Attribute(null, "stationID", __obj.stationID.toString, attr)
        case ("@typeID", _) => attr = scala.xml.Attribute(null, "typeID", __obj.typeID.toString, attr)
        case ("@volEntered", _) => attr = scala.xml.Attribute(null, "volEntered", __obj.volEntered.toString, attr)
        case ("@volRemaining", _) => attr = scala.xml.Attribute(null, "volRemaining", __obj.volRemaining.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.char.MarketOrder.Row, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

