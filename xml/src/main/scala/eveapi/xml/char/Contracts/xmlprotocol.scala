// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package eveapi.xml.account.char.Contracts

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[eveapi.xml.account.char.Contracts.Foo](node)
val document = scalaxb.toXML[eveapi.xml.account.char.Contracts.Foo](obj, "foo", eveapi.xml.account.char.Contracts.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val ContractsEveapiFormat: scalaxb.XMLFormat[eveapi.xml.account.char.Contracts.Eveapi] = new DefaultContractsEveapiFormat {}
  implicit lazy val ContractsResultFormat: scalaxb.XMLFormat[eveapi.xml.account.char.Contracts.Result] = new DefaultContractsResultFormat {}
  implicit lazy val ContractsRowsetFormat: scalaxb.XMLFormat[eveapi.xml.account.char.Contracts.Rowset] = new DefaultContractsRowsetFormat {}
  implicit lazy val ContractsRowFormat: scalaxb.XMLFormat[eveapi.xml.account.char.Contracts.Row] = new DefaultContractsRowFormat {}

  trait DefaultContractsEveapiFormat extends scalaxb.ElemNameParser[eveapi.xml.account.char.Contracts.Eveapi] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.account.char.Contracts.Eveapi] =
      phrase((scalaxb.ElemName(None, "currentTime")) ~ 
      (scalaxb.ElemName(None, "result")) ~ 
      (scalaxb.ElemName(None, "cachedUntil")) ^^
      { case p1 ~ p2 ~ p3 =>
      eveapi.xml.account.char.Contracts.Eveapi(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[eveapi.xml.account.char.Contracts.Result](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.account.char.Contracts.Eveapi, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.account.char.Contracts.Eveapi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.currentTime, None, Some("currentTime"), __scope, false),
        scalaxb.toXML[eveapi.xml.account.char.Contracts.Result](__obj.result, None, Some("result"), __scope, false),
        scalaxb.toXML[String](__obj.cachedUntil, None, Some("cachedUntil"), __scope, false))

  }

  trait DefaultContractsResultFormat extends scalaxb.ElemNameParser[eveapi.xml.account.char.Contracts.Result] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.account.char.Contracts.Result] =
      phrase((scalaxb.ElemName(None, "rowset")) ^^
      { case p1 =>
      eveapi.xml.account.char.Contracts.Result(scalaxb.fromXML[eveapi.xml.account.char.Contracts.Rowset](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: eveapi.xml.account.char.Contracts.Result, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[eveapi.xml.account.char.Contracts.Rowset](__obj.rowset, None, Some("rowset"), __scope, false))

  }

  trait DefaultContractsRowsetFormat extends scalaxb.ElemNameParser[eveapi.xml.account.char.Contracts.Rowset] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.account.char.Contracts.Rowset] =
      phrase(safeRep(scalaxb.ElemName(None, "row")) ^^
      { case p1 =>
      eveapi.xml.account.char.Contracts.Rowset(p1.toSeq map { scalaxb.fromXML[eveapi.xml.account.char.Contracts.Row](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@columns").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@columns" -> _ },
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.account.char.Contracts.Rowset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@columns", _) => attr = scala.xml.Attribute(null, "columns", __obj.columns.toString, attr)
        case ("@key", _) => attr = scala.xml.Attribute(null, "key", __obj.key.toString, attr)
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.account.char.Contracts.Rowset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.row flatMap { scalaxb.toXML[eveapi.xml.account.char.Contracts.Row](_, None, Some("row"), __scope, false) })

  }

  trait DefaultContractsRowFormat extends scalaxb.XMLFormat[eveapi.xml.account.char.Contracts.Row] with scalaxb.CanWriteChildNodes[eveapi.xml.account.char.Contracts.Row] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, eveapi.xml.account.char.Contracts.Row] = seq match {
      case node: scala.xml.Node => Right(eveapi.xml.account.char.Contracts.Row(scala.collection.immutable.ListMap(List(
        (node \ "@acceptorID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@acceptorID" -> _ },
        (node \ "@assigneeID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@assigneeID" -> _ },
        (node \ "@availability").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@availability" -> _ },
        (node \ "@buyout").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@buyout" -> _ },
        (node \ "@collateral").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@collateral" -> _ },
        (node \ "@contractID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@contractID" -> _ },
        (node \ "@dateAccepted").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dateAccepted" -> _ },
        (node \ "@dateCompleted").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dateCompleted" -> _ },
        (node \ "@dateExpired").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dateExpired" -> _ },
        (node \ "@dateIssued").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@dateIssued" -> _ },
        (node \ "@endStationID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@endStationID" -> _ },
        (node \ "@forCorp").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@forCorp" -> _ },
        (node \ "@issuerCorpID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@issuerCorpID" -> _ },
        (node \ "@issuerID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@issuerID" -> _ },
        (node \ "@numDays").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@numDays" -> _ },
        (node \ "@price").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@price" -> _ },
        (node \ "@reward").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@reward" -> _ },
        (node \ "@startStationID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@startStationID" -> _ },
        (node \ "@status").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@status" -> _ },
        (node \ "@title").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@title" -> _ },
        (node \ "@type").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@type" -> _ },
        (node \ "@volume").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigDecimal](x, scalaxb.ElemName(node) :: stack)) } map { "@volume" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: eveapi.xml.account.char.Contracts.Row, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@acceptorID", _) => attr = scala.xml.Attribute(null, "acceptorID", __obj.acceptorID.toString, attr)
        case ("@assigneeID", _) => attr = scala.xml.Attribute(null, "assigneeID", __obj.assigneeID.toString, attr)
        case ("@availability", _) => attr = scala.xml.Attribute(null, "availability", __obj.availability.toString, attr)
        case ("@buyout", _) => attr = scala.xml.Attribute(null, "buyout", __obj.buyout.toString, attr)
        case ("@collateral", _) => attr = scala.xml.Attribute(null, "collateral", __obj.collateral.toString, attr)
        case ("@contractID", _) => attr = scala.xml.Attribute(null, "contractID", __obj.contractID.toString, attr)
        case ("@dateAccepted", _) => attr = scala.xml.Attribute(null, "dateAccepted", __obj.dateAccepted.toString, attr)
        case ("@dateCompleted", _) => attr = scala.xml.Attribute(null, "dateCompleted", __obj.dateCompleted.toString, attr)
        case ("@dateExpired", _) => attr = scala.xml.Attribute(null, "dateExpired", __obj.dateExpired.toString, attr)
        case ("@dateIssued", _) => attr = scala.xml.Attribute(null, "dateIssued", __obj.dateIssued.toString, attr)
        case ("@endStationID", _) => attr = scala.xml.Attribute(null, "endStationID", __obj.endStationID.toString, attr)
        case ("@forCorp", _) => attr = scala.xml.Attribute(null, "forCorp", __obj.forCorp.toString, attr)
        case ("@issuerCorpID", _) => attr = scala.xml.Attribute(null, "issuerCorpID", __obj.issuerCorpID.toString, attr)
        case ("@issuerID", _) => attr = scala.xml.Attribute(null, "issuerID", __obj.issuerID.toString, attr)
        case ("@numDays", _) => attr = scala.xml.Attribute(null, "numDays", __obj.numDays.toString, attr)
        case ("@price", _) => attr = scala.xml.Attribute(null, "price", __obj.price.toString, attr)
        case ("@reward", _) => attr = scala.xml.Attribute(null, "reward", __obj.reward.toString, attr)
        case ("@startStationID", _) => attr = scala.xml.Attribute(null, "startStationID", __obj.startStationID.toString, attr)
        case ("@status", _) => attr = scala.xml.Attribute(null, "status", __obj.status.toString, attr)
        case ("@title", _) => attr = scala.xml.Attribute(null, "title", __obj.title.toString, attr)
        case ("@type", _) => attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
        case ("@volume", _) => attr = scala.xml.Attribute(null, "volume", __obj.volume.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.account.char.Contracts.Row, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

