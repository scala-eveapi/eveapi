// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package eveapi.xml.eve.FacWarStats

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[eveapi.xml.eve.FacWarStats.Foo](node)
val document = scalaxb.toXML[eveapi.xml.eve.FacWarStats.Foo](obj, "foo", eveapi.xml.eve.FacWarStats.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val FacWarStatsEveapiFormat: scalaxb.XMLFormat[eveapi.xml.eve.FacWarStats.Eveapi] = new DefaultFacWarStatsEveapiFormat {}
  implicit lazy val FacWarStatsResultFormat: scalaxb.XMLFormat[eveapi.xml.eve.FacWarStats.Result] = new DefaultFacWarStatsResultFormat {}
  implicit lazy val FacWarStatsTotalsFormat: scalaxb.XMLFormat[eveapi.xml.eve.FacWarStats.Totals] = new DefaultFacWarStatsTotalsFormat {}
  implicit lazy val FacWarStatsRowsetFormat: scalaxb.XMLFormat[eveapi.xml.eve.FacWarStats.Rowset] = new DefaultFacWarStatsRowsetFormat {}
  implicit lazy val FacWarStatsRowFormat: scalaxb.XMLFormat[eveapi.xml.eve.FacWarStats.Row] = new DefaultFacWarStatsRowFormat {}

  trait DefaultFacWarStatsEveapiFormat extends scalaxb.ElemNameParser[eveapi.xml.eve.FacWarStats.Eveapi] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.eve.FacWarStats.Eveapi] =
      phrase((scalaxb.ElemName(None, "currentTime")) ~ 
      (scalaxb.ElemName(None, "result")) ~ 
      (scalaxb.ElemName(None, "cachedUntil")) ^^
      { case p1 ~ p2 ~ p3 =>
      eveapi.xml.eve.FacWarStats.Eveapi(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[eveapi.xml.eve.FacWarStats.Result](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scala.collection.immutable.ListMap(List(
        (node \ "@version").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@version" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.eve.FacWarStats.Eveapi, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@version", _) => attr = scala.xml.Attribute(null, "version", __obj.version.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.eve.FacWarStats.Eveapi, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.currentTime, None, Some("currentTime"), __scope, false),
        scalaxb.toXML[eveapi.xml.eve.FacWarStats.Result](__obj.result, None, Some("result"), __scope, false),
        scalaxb.toXML[String](__obj.cachedUntil, None, Some("cachedUntil"), __scope, false))

  }

  trait DefaultFacWarStatsResultFormat extends scalaxb.ElemNameParser[eveapi.xml.eve.FacWarStats.Result] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.eve.FacWarStats.Result] =
      phrase((scalaxb.ElemName(None, "totals")) ~ 
      safeRep(scalaxb.ElemName(None, "rowset")) ^^
      { case p1 ~ p2 =>
      eveapi.xml.eve.FacWarStats.Result(scalaxb.fromXML[eveapi.xml.eve.FacWarStats.Totals](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[eveapi.xml.eve.FacWarStats.Rowset](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: eveapi.xml.eve.FacWarStats.Result, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[eveapi.xml.eve.FacWarStats.Totals](__obj.totals, None, Some("totals"), __scope, false),
        __obj.rowset flatMap { scalaxb.toXML[eveapi.xml.eve.FacWarStats.Rowset](_, None, Some("rowset"), __scope, false) })

  }

  trait DefaultFacWarStatsTotalsFormat extends scalaxb.ElemNameParser[eveapi.xml.eve.FacWarStats.Totals] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.eve.FacWarStats.Totals] =
      phrase((scalaxb.ElemName(None, "killsYesterday")) ~ 
      (scalaxb.ElemName(None, "killsLastWeek")) ~ 
      (scalaxb.ElemName(None, "killsTotal")) ~ 
      (scalaxb.ElemName(None, "victoryPointsYesterday")) ~ 
      (scalaxb.ElemName(None, "victoryPointsLastWeek")) ~ 
      (scalaxb.ElemName(None, "victoryPointsTotal")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      eveapi.xml.eve.FacWarStats.Totals(scalaxb.fromXML[BigInt](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigInt](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: eveapi.xml.eve.FacWarStats.Totals, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigInt](__obj.killsYesterday, None, Some("killsYesterday"), __scope, false),
        scalaxb.toXML[BigInt](__obj.killsLastWeek, None, Some("killsLastWeek"), __scope, false),
        scalaxb.toXML[BigInt](__obj.killsTotal, None, Some("killsTotal"), __scope, false),
        scalaxb.toXML[BigInt](__obj.victoryPointsYesterday, None, Some("victoryPointsYesterday"), __scope, false),
        scalaxb.toXML[BigInt](__obj.victoryPointsLastWeek, None, Some("victoryPointsLastWeek"), __scope, false),
        scalaxb.toXML[BigInt](__obj.victoryPointsTotal, None, Some("victoryPointsTotal"), __scope, false))

  }

  trait DefaultFacWarStatsRowsetFormat extends scalaxb.ElemNameParser[eveapi.xml.eve.FacWarStats.Rowset] {
    val targetNamespace: Option[String] = None
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[eveapi.xml.eve.FacWarStats.Rowset] =
      phrase(safeRep(scalaxb.ElemName(None, "row")) ^^
      { case p1 =>
      eveapi.xml.eve.FacWarStats.Rowset(p1.toSeq map { scalaxb.fromXML[eveapi.xml.eve.FacWarStats.Row](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap(List(
        (node \ "@columns").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@columns" -> _ },
        (node \ "@key").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@key" -> _ },
        (node \ "@name").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@name" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)) })
    
    override def writesAttribute(__obj: eveapi.xml.eve.FacWarStats.Rowset, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@columns", _) => attr = scala.xml.Attribute(null, "columns", __obj.columns.toString, attr)
        case ("@key", _) => __obj.key foreach { x => attr = scala.xml.Attribute(null, "key", x.toString, attr) }
        case ("@name", _) => attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.eve.FacWarStats.Rowset, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.row flatMap { scalaxb.toXML[eveapi.xml.eve.FacWarStats.Row](_, None, Some("row"), __scope, false) })

  }

  trait DefaultFacWarStatsRowFormat extends scalaxb.XMLFormat[eveapi.xml.eve.FacWarStats.Row] with scalaxb.CanWriteChildNodes[eveapi.xml.eve.FacWarStats.Row] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, eveapi.xml.eve.FacWarStats.Row] = seq match {
      case node: scala.xml.Node => Right(eveapi.xml.eve.FacWarStats.Row(scala.collection.immutable.ListMap(List(
        (node \ "@againstID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@againstID" -> _ },
        (node \ "@againstName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@againstName" -> _ },
        (node \ "@factionID").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@factionID" -> _ },
        (node \ "@factionName").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[String](x, scalaxb.ElemName(node) :: stack)) } map { "@factionName" -> _ },
        (node \ "@killsLastWeek").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@killsLastWeek" -> _ },
        (node \ "@killsTotal").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@killsTotal" -> _ },
        (node \ "@killsYesterday").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@killsYesterday" -> _ },
        (node \ "@pilots").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@pilots" -> _ },
        (node \ "@systemsControlled").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@systemsControlled" -> _ },
        (node \ "@victoryPointsLastWeek").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@victoryPointsLastWeek" -> _ },
        (node \ "@victoryPointsTotal").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@victoryPointsTotal" -> _ },
        (node \ "@victoryPointsYesterday").headOption map { x => scalaxb.DataRecord(x, node, scalaxb.fromXML[BigInt](x, scalaxb.ElemName(node) :: stack)) } map { "@victoryPointsYesterday" -> _ }
        ).flatten[(String, scalaxb.DataRecord[Any])]: _*)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    override def writesAttribute(__obj: eveapi.xml.eve.FacWarStats.Row, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case ("@againstID", _) => __obj.againstID foreach { x => attr = scala.xml.Attribute(null, "againstID", x.toString, attr) }
        case ("@againstName", _) => __obj.againstName foreach { x => attr = scala.xml.Attribute(null, "againstName", x.toString, attr) }
        case ("@factionID", _) => attr = scala.xml.Attribute(null, "factionID", __obj.factionID.toString, attr)
        case ("@factionName", _) => attr = scala.xml.Attribute(null, "factionName", __obj.factionName.toString, attr)
        case ("@killsLastWeek", _) => __obj.killsLastWeek foreach { x => attr = scala.xml.Attribute(null, "killsLastWeek", x.toString, attr) }
        case ("@killsTotal", _) => __obj.killsTotal foreach { x => attr = scala.xml.Attribute(null, "killsTotal", x.toString, attr) }
        case ("@killsYesterday", _) => __obj.killsYesterday foreach { x => attr = scala.xml.Attribute(null, "killsYesterday", x.toString, attr) }
        case ("@pilots", _) => __obj.pilots foreach { x => attr = scala.xml.Attribute(null, "pilots", x.toString, attr) }
        case ("@systemsControlled", _) => __obj.systemsControlled foreach { x => attr = scala.xml.Attribute(null, "systemsControlled", x.toString, attr) }
        case ("@victoryPointsLastWeek", _) => __obj.victoryPointsLastWeek foreach { x => attr = scala.xml.Attribute(null, "victoryPointsLastWeek", x.toString, attr) }
        case ("@victoryPointsTotal", _) => __obj.victoryPointsTotal foreach { x => attr = scala.xml.Attribute(null, "victoryPointsTotal", x.toString, attr) }
        case ("@victoryPointsYesterday", _) => __obj.victoryPointsYesterday foreach { x => attr = scala.xml.Attribute(null, "victoryPointsYesterday", x.toString, attr) }
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr)
      }
      attr
    }

    def writesChildNodes(__obj: eveapi.xml.eve.FacWarStats.Row, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


}

